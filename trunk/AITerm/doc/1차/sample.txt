#include <string>
#include <vector>

int main()
{
	std::string str1 = "test";
	std::string str2 = "test";

	std::string str3 = str1 + str2;
	
	// 비교문에서 바로 비교 가능
	if( str1 == str2 )
	{
		return true;
	}

	// 포인터 형으로 사용 가능
	const char * temp = str1.c_str();
	char * temp = (char)str1.c_str();

	// 텍스트 길이 가져오기
	int length = str1.length();

	// 중간 텍스트 가져오기
	std::string temp2 = str1[1];
	char * temp3 = str[1].c_str();
	char temp4 = str[1];


	// 리스트 정의 <> 내부에 리스트 자료형 넣기
	// int, char*, class, struct등 모두가 될수 있음
	std::vector<std::string> textList;
	
	// 리스트에 데이터 추가
	textList.push_back(str1);

	// 리스트 사이즈 가져오기
	int size = textList.size();

	// 리스트 순회 하면서 데이터 가져오기
	for( int num = 0; num < size; num++ )
	{
		std::string test = textList[ num ];
	}

	//
	std::vector<Template> TemplateList;

	Slot slot;
	slot._need = true;
	slot.push_back( "tag1" );
	slot.push_back( "tag2" );
	slot.push_back( "tag3" );

	Template temp;
	temp._tempNo = 10;
	temp._slotList.push_back( slot );
	temp._slotList.push_back( slot );
	temp._slotList.push_back( slot );

	TemplateList tempList;
	tempList.insert( 1, "test" );
	tempList.erase( 1 );
	tempList.push_back( temp );
	tempList.push_back( temp );
	tempList.push_back( temp );
	tempList.pop();
	tempList.pop_back();

	// 리스트 사이즈 가져오기
	int size = tempList.size();

	// 리스트 순회 하면서 데이터 가져오기
	for( int num = 0; num < size; num++ )
	{
		Template temp = tempList[ num ];
		int no = temp._tempNo; // no = 10;
		
		// std::vector<Slot> & slotList = temp._slotList;
		// int count = slotList.size();
		
		int count = temp._slotList.size();
		for( int cnt = 0; cnt < count; cnt++ )
		{
			Slot slot = temp._slotList[cnt];
			bool need = slot._need;	// need = true;
		}
	}

	std::vector<string>::iterator it = textList.begin();
	for( ; it != textList.end(); it++ )
	{
		std::string str = *it;
	}

	std::map<std::string,std::string> _map;
	map["apple"] = "bla~~~bla";
	std::string result = map["apple"];
}